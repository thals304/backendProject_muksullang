<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.application.muksullang.dao.UserDAO">

	<insert id="signUp" parameterType="UserDTO">
		INSERT INTO USER(
		USER_ID,
		PASSWD,
		EMAIL,
		ADDRESS,
		AGREE_YN,
		AGREE_EMAIL_YN
		)
		VALUES(
		#{userId},
		#{passwd},
		#{email},
		#{address},
		#{agreeYn},
		#{agreeEmailYn}
		)
	</insert>
	
	<select id="checkValidId" parameterType="String" resultType="String">
		SELECT USER_ID
		FROM   USER
		WHERE  USER_ID = #{userId}
	</select>
	
	<select id="signIn" parameterType="String" resultType="UserDTO">
		SELECT PASSWD,
		       ACTIVE_YN
		FROM   USER
		WHERE  USER_ID = #{userId}
	</select>
	
	<select id="getUserDetail" parameterType="String" resultType="UserDTO">
		SELECT *
		FROM   USER
		WHERE  USER_ID = #{userId}
	</select>
	
	<update id="updateUser" parameterType="UserDTO">
		UPDATE USER
		<set>
			<if test="profileOriginalName != null and profileOriginalName != ''">
				PROFILE_ORIGINAL_NAME = #{profileOriginalName},
			</if>
			<if test="profileUUID != null and !profileUUID != ''">
				PROFILE_UUID = #{profileUUID},
			</if>
			<if test="passwd != null and !profileUUID != ''">
				PASSWD = #{passwd},
			</if>
			<if test="email != null and email != ''">
				EMAIL = #{email}, 
			</if>
			<if test="address != null and address != ''">
				ADDRESS = #{address}
			</if>
		</set>
		WHERE USER_ID = #{userId}
	</update>
	
	<resultMap id="postDetailMap" type="PostDTO">
    <result column="POST_ID" property="postId"/>
    <result column="POST_NM" property="postNm"/>
    <result column="POST_TITLE" property="title"/>
    <result column="POST_IMAGE" property="image"/>
    <result column="POST_SORT" property="sort"/>
    <result column="POST_ENROLL_AT" property="enrollAt"></result>
	</resultMap>
	
	<select id="getCountPosts" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM   POST P
		LEFT JOIN BOOKMARK B ON P.POST_ID = B.POST_ID AND B.USER_ID = #{userId}
	    LEFT JOIN REPLY R ON P.POST_ID = R.POST_ID AND R.USER_ID = #{userId}
	    WHERE B.USER_ID IS NOT NULL
	       OR R.USER_ID IS NOT NULL
	</select>
	
	<select id="getAllPosts" parameterType="map" resultMap="postDetailMap">
	    SELECT DISTINCT 
	        P.POST_ID AS POST_ID,
	        P.POST_NM AS POST_NM,
	        P.TITLE AS POST_TITLE,
	        P.IMAGE AS POST_IMAGE,
	        P.SORT AS POST_SORT,
	        P.ENROLL_AT AS POST_ENROLL_AT
	    FROM POST P
	    LEFT JOIN BOOKMARK B ON P.POST_ID = B.POST_ID AND B.USER_ID = #{userId}
	    LEFT JOIN REPLY R ON P.POST_ID = R.POST_ID AND R.USER_ID = #{userId}
	    WHERE B.USER_ID IS NOT NULL
	       OR R.USER_ID IS NOT NULL
	    ORDER BY P.ENROLL_AT 
	    LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<select id="getBookmarkedPosts" parameterType="String" resultMap="postDetailMap">
		SELECT DISTINCT 
	        P.POST_ID AS POST_ID,
	        P.POST_NM AS POST_NM,
	        P.TITLE AS POST_TITLE,
	        P.IMAGE AS POST_IMAGE,
	        P.SORT AS POST_SORT
	    FROM POST P
	    LEFT JOIN BOOKMARK B ON P.POST_ID = B.POST_ID AND B.USER_ID = #{userId}
	    WHERE B.USER_ID IS NOT NULL
	</select>
	
	<select id="getReviewedPosts" parameterType="String" resultMap="postDetailMap">
		SELECT DISTINCT 
	        P.POST_ID AS POST_ID,
	        P.POST_NM AS POST_NM,
	        P.TITLE AS POST_TITLE,
	        P.IMAGE AS POST_IMAGE,
	        P.SORT AS POST_SORT
	    FROM POST P
	    LEFT JOIN REPLY R ON P.POST_ID = R.POST_ID AND R.USER_ID = #{userId}
	    WHERE R.USER_ID IS NOT NULL
	</select>
	
	<update id="updateInactiveUser" parameterType="String">
		UPDATE USER
		SET    ACTIVE_YN = 'n',
		       INACTIVE_AT = NOW()
		WHERE  USER_ID = #{userId}
	</update>
	
	<select id="getTodayNewMemberCnt" parameterType="String" resultType="int">
		SELECT COUNT(USER_ID)
		FROM   USER
		WHERE  LEFT(JOIN_AT , 10) = #{today}
	</select>
	
	<select id="getInActiveMemberList" resultType="UserDTO">
		<![CDATA[
			SELECT	USER_ID , 
					PROFILE_UUID
			FROM	USER
			WHERE	INACTIVE_AT >= (SELECT DATE_SUB(NOW() , INTERVAL 30 DAY))
		]]>
									<!-- 
										
										# DATE_SUB(기준 날짜, INTERVAL) : 시간 빼기함수  
										
										- SELECT DATE_SUB(NOW() ,  INTERVAL 90 DAY) : 현재시간 기준 90일전 일자를 반환
										- INACTIVE_AT >= (SELECT DATE_SUB(NOW() ,  INTERVAL 90 DAY))  : 현재시간기준 90일전 일자보다 INACTIVE_AT 날짜가 더 크면(90일이 지났으면)
									
									 -->
	</select>
	
	<delete id="deleteUser" parameterType="String">
		DELETE FROM USER
		WHERE  USER_ID = #{userId}
	</delete>
</mapper>